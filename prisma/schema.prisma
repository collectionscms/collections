generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @db.VarChar(255)
  description  String?       @db.VarChar(255)
  subdomain    String        @unique @db.VarChar(255)
  enabled      Boolean       @default(true)
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(6)
  userProjects UserProject[]
  files        File[]
  roles        Role[]
  permissions  Permission[]
  posts        Post[]
  contents     Content[]
  PostHistory  PostHistory[]
}

model User {
  id                      String        @id @default(uuid()) @db.Uuid
  name                    String        @db.VarChar(255)
  email                   String        @unique
  password                String        @db.VarChar(255)
  isActive                Boolean       @default(true)
  avatarUrl               String?       @db.VarChar(255)
  resetPasswordToken      String?       @db.VarChar(255)
  resetPasswordExpiration DateTime?
  apiKey                  String?       @db.VarChar(255)
  createdAt               DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime      @updatedAt @db.Timestamptz(6)
  userProjects            UserProject[]
  post                    Post[]
}

model UserProject {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  projectId String   @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  roleId    String   @db.Uuid
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Role {
  id           String        @id @default(uuid()) @db.Uuid
  projectId    String        @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  name         String        @db.VarChar(255)
  description  String?       @db.VarChar(255)
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(6)
  permissions  Permission[]
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userProjects UserProject[]
}

model Permission {
  id          String   @id @default(uuid()) @db.Uuid
  roleId      String   @db.Uuid
  projectId   String   @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model File {
  id           String    @id @default(uuid()) @db.Uuid
  projectId    String    @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  storage      String    @db.VarChar(255)
  fileName     String    @db.VarChar(255)
  fileNameDisk String    @db.VarChar(255)
  type         String    @db.VarChar(255)
  fileSize     Int?
  width        Int?
  height       Int?
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  contents     Content[]
}

model Post {
  id            String        @id @default(uuid()) @db.Uuid
  projectId     String        @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  slug          String        @db.VarChar(255)
  status        String        @db.VarChar(255)
  publishedAt   DateTime?     @db.Timestamptz(6)
  defaultLocale String        @db.VarChar(255)
  version       Int           @default(0)
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime      @updatedAt @db.Timestamptz(6)
  createdById   String        @db.Uuid
  project       Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  contents      Content[]
  createdBy     User          @relation(fields: [createdById], references: [id])
  postHistories PostHistory[]
}

model PostHistory {
  id        String   @id @default(uuid()) @db.Uuid
  projectId String   @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  postId    String   @db.Uuid
  userName  String   @db.VarChar(255)
  status    String   @db.VarChar(255)
  version   Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Content {
  id        String   @id @default(uuid()) @db.Uuid
  projectId String   @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  postId    String   @db.Uuid
  fileId    String?  @db.Uuid
  title     String?  @db.VarChar(255)
  body      String?
  bodyJson  String?
  bodyHtml  String?
  locale    String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  file      File?    @relation(fields: [fileId], references: [id], onDelete: SetNull)
}
