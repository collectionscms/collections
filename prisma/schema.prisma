generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                   String                @id @db.Uuid
  name                 String                @db.VarChar(255)
  description          String?               @db.VarChar(255)
  subdomain            String                @unique @db.VarChar(255)
  iconUrl              String?               @db.VarChar(255)
  enabled              Boolean               @default(true)
  sourceLanguage       String                @db.VarChar(255)
  createdAt            DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime              @updatedAt @db.Timestamptz(6)
  userProjects         UserProject[]
  files                File[]
  roles                Role[]
  posts                Post[]
  contents             Content[]
  contentRevisions     ContentRevision[]
  apiKeys              ApiKey[]
  invitations          Invitation[]
  rolePermissions      RolePermission[]
  reivews              Review[]
  apiKeyPermissions    ApiKeyPermission[]
  webhookSettings      WebhookSetting[]
  webhookLogs          WebhookLog[]
  textGenerationUsages TextGenerationUsage[]
  contentTags          ContentTag[]
}

model User {
  id                           String                @id @db.Uuid
  name                         String                @db.VarChar(255)
  email                        String
  password                     String?               @db.VarChar(255)
  isActive                     Boolean               @default(true)
  avatarUrl                    String?               @db.VarChar(255)
  provider                     String                @db.VarChar(255)
  providerId                   String                @db.VarChar(255)
  createdAt                    DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt                    DateTime              @updatedAt @db.Timestamptz(6)
  userProjects                 UserProject[]
  invitations                  Invitation[]
  revieweeHasReviews           Review[]              @relation("Reviewee")
  reviewerHasReviews           Review[]              @relation("Reviewer")
  createdByHasContents         Content[]             @relation("CreatedBy")
  updatedByHasContents         Content[]             @relation("UpdatedBy")
  createdByHasApiKeys          ApiKey[]              @relation("CreatedBy")
  updatedByHasApiKeys          ApiKey[]              @relation("UpdatedBy")
  createdByHasPosts            Post[]                @relation("CreatedBy")
  createdByHasContentRevisions ContentRevision[]     @relation("CreatedBy")
  updatedByHasContentRevisions ContentRevision[]     @relation("UpdatedBy")
  textGenerationUsages         TextGenerationUsage[]

  @@unique([provider, providerId])
}

model UserProject {
  id        String   @id @db.Uuid
  userId    String   @db.Uuid
  projectId String   @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  roleId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Invitation {
  id          String   @id @db.Uuid
  email       String
  projectId   String   @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  roleId      String   @db.Uuid
  invitedById String   @db.Uuid
  token       String   @db.VarChar(255)
  status      String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [invitedById], references: [id], onDelete: NoAction)
}

model Role {
  id              String           @id @db.Uuid
  projectId       String           @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  name            String           @db.VarChar(255)
  description     String?          @db.VarChar(255)
  isAdmin         Boolean          @default(false)
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(6)
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userProjects    UserProject[]
  invitations     Invitation[]
  rolePermissions RolePermission[]
}

model RolePermission {
  id               String     @id @db.Uuid
  roleId           String     @db.Uuid
  projectId        String     @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  permissionAction String     @db.VarChar(255)
  createdAt        DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime   @updatedAt @db.Timestamptz(6)
  role             Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  project          Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  permission       Permission @relation(fields: [permissionAction], references: [action], onDelete: Cascade)
}

model Permission {
  action            String             @id @db.VarChar(255)
  group             String             @db.VarChar(255)
  displayOrder      Int
  rolePermissions   RolePermission[]
  apiKeyPermissions ApiKeyPermission[]
}

model File {
  id           String   @id @db.Uuid
  projectId    String?  @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  storage      String   @db.VarChar(255)
  fileName     String   @db.VarChar(255)
  fileNameDisk String   @db.VarChar(255)
  type         String   @db.VarChar(255)
  fileSize     Int?
  width        Int?
  height       Int?
  project      Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Post {
  id               String            @id @db.Uuid
  projectId        String            @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  createdById      String            @db.Uuid
  createdAt        DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @db.Timestamptz(6)
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy        User              @relation(name: "CreatedBy", fields: [createdById], references: [id], onDelete: NoAction)
  contents         Content[]
  reviews          Review[]
  contentRevisions ContentRevision[]
}

model Review {
  id         String   @id @db.Uuid
  projectId  String   @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  postId     String   @db.Uuid
  contentId  String   @db.Uuid
  revieweeId String   @db.Uuid
  reviewerId String?  @db.Uuid
  comment    String
  status     String   @db.VarChar(255)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  content    Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  reviewee   User     @relation(name: "Reviewee", fields: [revieweeId], references: [id], onDelete: Cascade)
  reviewer   User?    @relation(name: "Reviewer", fields: [reviewerId], references: [id], onDelete: SetNull)
}

model Content {
  id                   String                @id @db.Uuid
  projectId            String                @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  postId               String                @db.Uuid
  slug                 String
  title                String?               @db.VarChar(255)
  subtitle             String?
  body                 String?
  bodyJson             String?
  bodyHtml             String?
  metaTitle            String?               @db.VarChar(255)
  metaDescription      String?
  coverUrl             String?               @db.VarChar(255)
  language             String                @db.VarChar(255)
  status               String                @db.VarChar(255)
  currentVersion       Int                   @default(1)
  draftKey             String                @default(dbgenerated("substring(md5(random()::text), 1, 10)")) @db.VarChar(255)
  publishedAt          DateTime?             @db.Timestamptz(6)
  deletedAt            DateTime?             @db.Timestamptz(6)
  createdById          String                @db.Uuid
  updatedById          String                @db.Uuid
  createdAt            DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime              @updatedAt @db.Timestamptz(6)
  project              Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  post                 Post                  @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdBy            User                  @relation(name: "CreatedBy", fields: [createdById], references: [id], onDelete: NoAction)
  updatedBy            User                  @relation(name: "UpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction)
  reviews              Review[]
  contentRevisions     ContentRevision[]
  textGenerationUsages TextGenerationUsage[]
  contentTags          ContentTag[]

  @@unique([projectId, slug])
  @@unique([postId, language])
}

model ContentRevision {
  id              String    @id @db.Uuid
  projectId       String    @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  postId          String    @db.Uuid
  contentId       String    @db.Uuid
  slug            String
  title           String?   @db.VarChar(255)
  subtitle        String?
  body            String?
  bodyJson        String?
  bodyHtml        String?
  metaTitle       String?   @db.VarChar(255)
  metaDescription String?
  coverUrl        String?   @db.VarChar(255)
  language        String    @db.VarChar(255)
  status          String    @db.VarChar(255)
  version         Int       @default(1)
  draftKey        String    @default(dbgenerated("substring(md5(random()::text), 1, 10)")) @db.VarChar(255)
  publishedAt     DateTime? @db.Timestamptz(6)
  deletedAt       DateTime? @db.Timestamptz(6)
  createdById     String    @db.Uuid
  updatedById     String    @db.Uuid
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @updatedAt @db.Timestamptz(6)
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  content         Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  createdBy       User      @relation(name: "CreatedBy", fields: [createdById], references: [id], onDelete: NoAction)
  updatedBy       User      @relation(name: "UpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction)
}

model Tag {
  id          String       @id @db.Uuid
  projectId   String       @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  name        String       @db.VarChar(255)
  contentTags ContentTag[]

  @@unique([projectId, name])
}

model ContentTag {
  id           String   @id @db.Uuid
  projectId    String   @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  contentId    String   @db.Uuid
  tagId        String   @db.Uuid
  displayOrder Int
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  content      Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  tag          Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id                String             @id @db.Uuid
  projectId         String             @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  name              String             @db.VarChar(255)
  key               String             @db.VarChar(255)
  createdById       String             @db.Uuid
  updatedById       String             @db.Uuid
  createdBy         User               @relation(name: "CreatedBy", fields: [createdById], references: [id], onDelete: NoAction)
  updatedBy         User               @relation(name: "UpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction)
  createdAt         DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime           @updatedAt @db.Timestamptz(6)
  project           Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  apiKeyPermissions ApiKeyPermission[]
}

model ApiKeyPermission {
  id               String     @id @db.Uuid
  apiKeyId         String     @db.Uuid
  projectId        String     @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  permissionAction String     @db.VarChar(255)
  createdAt        DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime   @updatedAt @db.Timestamptz(6)
  apiKey           ApiKey     @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  project          Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  permission       Permission @relation(fields: [permissionAction], references: [action], onDelete: Cascade)
}

model WebhookSetting {
  id                 String   @id @db.Uuid
  projectId          String   @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  name               String   @db.VarChar(255)
  provider           String   @db.VarChar(255)
  enabled            Boolean  @default(true)
  url                String?  @db.VarChar(255)
  onPublish          Boolean  @default(false)
  onArchive          Boolean  @default(false)
  onDeletePublished  Boolean  @default(false)
  onRestorePublished Boolean  @default(false)
  onRevert           Boolean  @default(false)
  createdAt          DateTime @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime @updatedAt @db.Timestamptz(6)
  project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model WebhookLog {
  id           String   @id @db.Uuid
  projectId    String   @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  name         String   @db.VarChar(255)
  provider     String   @db.VarChar(255)
  url          String?  @db.VarChar(255)
  triggerEvent String   @db.VarChar(255)
  status       String   @db.VarChar(255)
  responseCode Int?
  responseBody String?
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TextGenerationUsage {
  id            String   @id @db.Uuid
  projectId     String   @default(dbgenerated("(current_setting('app.current_project_id'::text))::uuid")) @db.Uuid
  contentId     String   @db.Uuid
  userId        String   @db.Uuid
  sourceText    Json
  generatedText Json
  context       String   @db.VarChar(255)
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  content       Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
