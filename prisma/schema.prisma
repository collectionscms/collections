// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(uuid()) @db.Uuid
  roleId                  String        @db.Uuid
  name                    String        @db.VarChar(255)
  email                   String        @unique
  password                String        @db.VarChar(255)
  isActive                Boolean       @default(true)
  avatarUrl               String?       @db.VarChar(255)
  resetPasswordToken      String?       @db.VarChar(255)
  resetPasswordExpiration Int?
  apiKey                  String?       @db.VarChar(255)
  createdAt               DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime      @updatedAt @db.Timestamptz(6)
  role                    Role          @relation(fields: [roleId], references: [id])
  userProjects            UserProject[]
}

model Project {
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @db.VarChar(255)
  description  String?       @db.VarChar(255)
  slug         String        @unique
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(6)
  userProjects UserProject[]
  permissions  Permission[]
  files        File[]
  roles        Role[]
}

model UserProject {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  projectId String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Role {
  id              String           @id @default(uuid()) @db.Uuid
  projectId       String           @db.Uuid
  name            String           @db.VarChar(255)
  description     String?          @db.VarChar(255)
  adminAccess     Boolean          @default(false)
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(6)
  users           User[]
  rolePermissions RolePermission[]
  project         Project          @relation(fields: [projectId], references: [id])
}

model Permission {
  id              String           @id @default(uuid()) @db.Uuid
  projectId       String           @db.Uuid
  name            String           @db.VarChar(255)
  description     String?          @db.VarChar(255)
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(6)
  rolePermissions RolePermission[]
  project         Project          @relation(fields: [projectId], references: [id])
}

model RolePermission {
  id           String     @id @default(uuid()) @db.Uuid
  roleId       String     @db.Uuid
  permissionId String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt @db.Timestamptz(6)
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model File {
  id           String  @id @default(uuid()) @db.Uuid
  projectId    String  @db.Uuid
  storage      String  @db.VarChar(255)
  fileName     String  @db.VarChar(255)
  fileNameDisk String  @db.VarChar(255)
  type         String  @db.VarChar(255)
  fileSize     Int?
  width        Int?
  height       Int?
  project      Project @relation(fields: [projectId], references: [id])
}
